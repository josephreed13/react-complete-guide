{"version":3,"sources":["components/Cockpit/Cockpit.css","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js","containers/App.css","components/Persons/Person/Person.css"],"names":["module","exports","red","bold","Cockpit","Red","person","props","react_default","a","createElement","className","classes","Person","onClick","click","name","age","children","type","onChange","changed","value","persons","map","index","Person_Person","clicked","key","id","event","cockpit","assignedClasses","btnClass","showPersons","length","push","join","toggle","App","state","otherState","nameChangedHandler","personIndex","_this","findIndex","p","Object","objectSpread","target","toConsumableArray","setState","deletePersonsHandler","splice","togglePersonsHandler","doesShow","this","Persons","Cockpit_Cockpit","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,IAAA,sBAAAC,KAAA,uBAAAC,QAAA,0BAAAC,IAAA,wPCYHC,EAVA,SAACC,GACf,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQC,QACvBL,EAAAC,EAAAC,cAAA,KAAGI,QAASP,EAAMQ,OAAlB,QAA+BR,EAAMS,KAArC,aAAqDT,EAAMU,IAA3D,cACAT,EAAAC,EAAAC,cAAA,SAAIH,EAAMW,UACVV,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,SAAUb,EAAMc,QAASC,MAAOf,EAAMS,SCI7CO,EATC,SAAChB,GAAD,OAAWA,EAAMgB,QAAQC,IAAI,SAAClB,EAAQmB,GACrD,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,CACLX,MAAO,kBAAMR,EAAMoB,QAAQF,IAC3BT,KAAMV,EAAOU,KACbC,IAAKX,EAAOW,IACZW,IAAKtB,EAAOuB,GACZR,QAAS,SAACS,GAAD,OAAWvB,EAAMc,QAAQS,EAAOxB,EAAOuB,0BCkBpCE,EAxBC,SAACxB,GAEhB,IAAMyB,EAAkB,GACpBC,EAAW,GAYf,OAVI1B,EAAM2B,cACTD,EAAWrB,IAAQP,KAEjBE,EAAMgB,QAAQY,QAAU,GAC1BH,EAAgBI,KAAKxB,IAAQV,KAE3BK,EAAMgB,QAAQY,QAAU,GAC1BH,EAAgBI,KAAKxB,IAAQT,MAI7BK,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQR,SACvBI,EAAAC,EAAAC,cAAA,iCACMF,EAAAC,EAAAC,cAAA,KAAGC,UAAWqB,EAAgBK,KAAK,MAAnC,2BACA7B,EAAAC,EAAAC,cAAA,UAAQC,UAAWsB,EAAUnB,QAASP,EAAM+B,QAA5C,oBC+DMC,6MA5EdC,MAAQ,CACPjB,QAAS,CACR,CAAEM,GAAI,SAAUb,KAAM,MAAOC,IAAK,IAClC,CAAEY,GAAI,SAAUb,KAAM,QAASC,IAAK,IACpC,CAAEY,GAAI,SAAUb,KAAM,MAAOC,IAAK,KAEnCwB,WAAY,mBACZP,aAAa,KAGdQ,mBAAqB,SAACZ,EAAOD,GAE5B,IAAMc,EAAcC,EAAKJ,MAAMjB,QAAQsB,UAAU,SAAAC,GAChD,OAAOA,EAAEjB,KAAOA,IAIXvB,EAAMyC,OAAAC,EAAA,EAAAD,CAAA,GACRH,EAAKJ,MAAMjB,QAAQoB,IAIvBrC,EAAOU,KAAOc,EAAMmB,OAAO3B,MAG3B,IAAMC,EAAOwB,OAAAG,EAAA,EAAAH,CAAOH,EAAKJ,MAAMjB,SAG/BA,EAAQoB,GAAerC,EAGvBsC,EAAKO,SAAS,CAAC5B,QAASA,OAGzB6B,qBAAuB,SAACT,GAEvB,IAAMpB,EAAOwB,OAAAG,EAAA,EAAAH,CAAOH,EAAKJ,MAAMjB,SAC/BA,EAAQ8B,OAAOV,EAAa,GAC5BC,EAAKO,SAAS,CAAC5B,QAASA,OAGzB+B,qBAAuB,WACtB,IAAMC,EAAWX,EAAKJ,MAAMN,YAC5BU,EAAKO,SAAS,CAACjB,aAAcqB,6EAK7B,IAAIhC,EAAU,KAcX,OAZCiC,KAAKhB,MAAMN,cACdX,EACEf,EAAAC,EAAAC,cAAC+C,EAAD,CACClC,QAASiC,KAAKhB,MAAMjB,QACpBI,QAAS6B,KAAKJ,qBACd/B,QAASmC,KAAKd,sBAQXlC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ2B,KACtB/B,EAAAC,EAAAC,cAACgD,EAAD,CACAxB,YAAasB,KAAKhB,MAAMN,YACxBX,QAASiC,KAAKhB,MAAMjB,QACpBe,OAAQkB,KAAKF,uBAEZ/B,UAtEMoC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInB3E,EAAAC,QAAA,CAAkBsC,IAAA,sCCAlBvC,EAAAC,QAAA,CAAkBY,OAAA","file":"static/js/main.f33f914d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Cockpit__red__3H17r\",\"bold\":\"Cockpit__bold__uRU0B\",\"Cockpit\":\"Cockpit__Cockpit__iuz7I\",\"Red\":\"Cockpit__Red__3VVpE\"};","import React from 'react';\nimport classes from './Person.css';\n\nconst person = (props) => {\n\treturn (\n\t\t<div className={classes.Person}>\n\t\t\t<p onClick={props.click}>I am {props.name} and I am {props.age} years old</p>\n\t\t\t<p>{props.children}</p>\n\t\t\t<input type=\"text\" onChange={props.changed} value={props.name}/>\n\t\t</div>\n\t)\n};\n\nexport default person;","import React from 'react';\nimport Person from './Person/Person';\n\nconst persons = (props) => props.persons.map((person, index) => {\n\treturn <Person \n\t\t\tclick={() => props.clicked(index)}\n\t\t\tname={person.name} \n\t\t\tage={person.age}\n\t\t\tkey={person.id}\n\t\t\tchanged={(event) => props.changed(event, person.id)}/>\n});\n\nexport default persons;","import React from 'react';\nimport classes from './Cockpit.css';\n\nconst cockpit = (props) => {\n\t\n\tconst assignedClasses = [];\n\tlet btnClass = '';\n\n\tif (props.showPersons) {\n\t\tbtnClass = classes.Red;\n\t}\n\tif(props.persons.length <= 2) {\n\t\tassignedClasses.push(classes.red); // classes = ['red']\n\t}\n\tif(props.persons.length <= 1) {\n\t\tassignedClasses.push(classes.bold); // classes = ['red','bold']\n\t}\n\n\treturn (\n\t\t<div className={classes.Cockpit}>\n\t\t\t<h1>Hi, I'm a React App</h1>\n\t        <p className={assignedClasses.join(' ')}>This is really working!</p>\n\t        <button className={btnClass} onClick={props.toggle}>Toggle Persons</button>\n\t\t</div>\n\t);\n};\n\nexport default cockpit;","import React, { Component } from 'react';\n\n// JS object which gives you access to a string version of your css styles. The CSS style was adjusted to be unique\n// this is the only place where these styles can have an effect. (CSS Modules)\nimport classes from './App.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\n\nclass App extends Component {\n\tstate = {\n\t\tpersons: [\n\t\t\t{ id: 'asdf23', name: 'Joe', age: 22 },\n\t\t\t{ id: 'hgfdj3', name: 'Kelly', age: 23 },\n\t\t\t{ id: 'jfbd34', name: 'Max', age: 28 }\n\t\t],\n\t\totherState: 'some other value',\n\t\tshowPersons: false\n\t}\n\n\tnameChangedHandler = (event, id) => {\n\t\t// find id\n\t\tconst personIndex = this.state.persons.findIndex(p => {\n\t\t\treturn p.id === id;\n\t\t});\n\n\t\t// copy of person\n\t\tconst person = {\n\t\t\t...this.state.persons[personIndex]\n\t\t};\n\n\t\t// set name of copy to value in the change event\n\t\tperson.name = event.target.value;\n\n\t\t// create copy of state array\n\t\tconst persons = [...this.state.persons];\n\n\t\t// update person in the copy of persons array\n\t\tpersons[personIndex] = person;\n\n\t\t// update state with copy\n\t\tthis.setState({persons: persons}); \n\t}\n\n\tdeletePersonsHandler = (personIndex) => {\n\t\t// const persons = this.state.persons.slice();\n\t\tconst persons = [...this.state.persons];\n\t\tpersons.splice(personIndex, 1);\n\t\tthis.setState({persons: persons});\n\t}\n\n\ttogglePersonsHandler = () => {\n\t\tconst doesShow = this.state.showPersons;\n\t\tthis.setState({showPersons: !doesShow});\n\t}\n\n\trender() {\n\n\t\tlet persons = null;\n\n\t\tif (this.state.showPersons) {\n\t\t\tpersons = (\n\t\t\t\t\t<Persons \n\t\t\t\t\t\tpersons={this.state.persons}\n\t\t\t\t\t\tclicked={this.deletePersonsHandler}\n\t\t\t\t\t\tchanged={this.nameChangedHandler}\n\t\t\t\t\t/>\n\t\t\t);\n\n\n\t\t}\n\n\t    return (\n\t\t      \t<div className={classes.App}>\n\t\t\t        <Cockpit \n\t\t\t        showPersons={this.state.showPersons}\n\t\t\t        persons={this.state.persons}\n\t\t\t        toggle={this.togglePersonsHandler}\n\t\t\t        />\n\t\t\t        {persons}\n\n\t\t\t    </div>\n\t    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__2NQx7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person__Person__37wpp\"};"],"sourceRoot":""}