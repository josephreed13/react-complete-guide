{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","otherState","switchNameHandler","newName","_this","setState","nameChangedHandler","event","target","_this2","this","style","backgroundColor","font","border","padding","cursor","Person_Person","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAceA,eAVA,SAACC,GACf,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,QAA+BN,EAAMO,KAArC,aAAqDP,EAAMQ,IAA3D,cACAP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,UACVR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,SAAUX,EAAMY,QAASC,MAAOb,EAAMO,UCkE7CO,6MAtEdC,MAAQ,CACPC,QAAS,CACR,CAAET,KAAM,MAAOC,IAAK,IACpB,CAAED,KAAM,QAASC,IAAK,IACtB,CAAED,KAAM,MAAOC,IAAK,KAErBS,WAAY,sBAGbC,kBAAoB,SAACC,GAGpBC,EAAKC,SAAS,CACbL,QAAS,CACR,CAAET,KAAMY,EAASX,IAAK,IACtB,CAAED,KAAM,QAASC,IAAK,IACtB,CAAED,KAAM,MAAOC,IAAK,UAKvBc,mBAAqB,SAACC,GACrBH,EAAKC,SAAS,CACbL,QAAS,CACR,CAAET,KAAM,MAAOC,IAAK,IACpB,CAAED,KAAMgB,EAAMC,OAAOX,MAAOL,IAAK,IACjC,CAAED,KAAM,MAAOC,IAAK,gFAKd,IAAAiB,EAAAC,KAWL,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UACAwB,MAbO,CACbC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,WASF3B,QAAS,kBAAMoB,EAAKP,kBAAkB,cAFtC,eAGAjB,EAAAC,EAAAC,cAAC8B,EAAD,CACC1B,KAAMmB,KAAKX,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKkB,KAAKX,MAAMC,QAAQ,GAAGR,MAE5BP,EAAAC,EAAAC,cAAC8B,EAAD,CACC1B,KAAMmB,KAAKX,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKkB,KAAKX,MAAMC,QAAQ,GAAGR,IAC3BF,MAAOoB,KAAKR,kBAAkBgB,KAAKR,KAAK,QACxCd,QAASc,KAAKJ,oBAJf,0BAOArB,EAAAC,EAAAC,cAAC8B,EAAD,CACC1B,KAAMmB,KAAKX,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKkB,KAAKX,MAAMC,QAAQ,GAAGR,cA/DnB2B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b6ace18d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Person.css';\n\nconst person = (props) => {\n\treturn (\n\t\t<div className=\"Person\">\n\t\t\t<p onClick={props.click}>I am {props.name} and I am {props.age} years old</p>\n\t\t\t<p>{props.children}</p>\n\t\t\t<input type=\"text\" onChange={props.changed} value={props.name}/>\n\t\t</div>\n\t)\n};\n\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n\tstate = {\n\t\tpersons: [\n\t\t\t{ name: 'Joe', age: 22 },\n\t\t\t{ name: 'Kelly', age: 23 },\n\t\t\t{ name: 'Max', age: 28 }\n\t\t],\n\t\totherState: 'some other value'\n\t}\n\n\tswitchNameHandler = (newName) => {\n\t\t// console.log(\"was clicked\");\n\t\t// DONT do this this.state.persons[0].name = 'Joseph';\n\t\tthis.setState({\n\t\t\tpersons: [\n\t\t\t\t{ name: newName, age: 22 },\n\t\t\t\t{ name: 'Kelly', age: 23 },\n\t\t\t\t{ name: 'Max', age: 27 }\n\t\t\t]\n\t\t}) \n\t}\n\n\tnameChangedHandler = (event) => {\n\t\tthis.setState({\n\t\t\tpersons: [\n\t\t\t\t{ name: 'Joe', age: 22 },\n\t\t\t\t{ name: event.target.value, age: 23 },\n\t\t\t\t{ name: 'Max', age: 26 }\n\t\t\t]\n\t\t}) \n\t}\n\n\trender() {\n\t\t\n\t\t// 'inline style'\n\t\tconst style = {\n\t\t\tbackgroundColor: 'white',\n\t\t\tfont: 'inherit',\n\t\t\tborder: '1px solid blue',\n\t\t\tpadding: '8px',\n\t\t\tcursor: 'pointer'\n\t\t};\n\n\t    return (\n\t      <div className=\"App\">\n\t        <h1>Hi, I'm a React App</h1>\n\t        <p>This is really working!</p>\n\t        <button \n\t        style={style}\n\t        onClick={() => this.switchNameHandler('Joseph!!')}>Switch Name</button>\n\t        <Person \n\t        \tname={this.state.persons[0].name} \n\t        \tage={this.state.persons[0].age}\n        \t/>\n\t        <Person \n\t        \tname={this.state.persons[1].name} \n\t        \tage={this.state.persons[1].age}\n\t        \tclick={this.switchNameHandler.bind(this,'Joe!')}\n\t        \tchanged={this.nameChangedHandler}>\n\t        \tMy hobbies: Accounting\n        \t</Person>\n\t        <Person \n\t        \tname={this.state.persons[2].name} \n\t        \tage={this.state.persons[2].age}\n        \t/>\n\t      </div>\n\t    );\n\t    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}